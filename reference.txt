# MONISHA INVENTORY MANAGEMENT SYSTEM - REFERENCE GUIDE

## FIREBASE CONFIGURATION

### Firebase Project Setup
1. Create a project in Firebase Console: https://console.firebase.google.com/
2. Enable Authentication with Email/Password provider
3. Create Firestore Database in production mode
4. Set up Firebase Storage for product images

### Security Rules
Firestore security rules:
```
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow authenticated users to read all documents
    match /{document=**} {
      allow read: if request.auth != null;
    }
    
    // Staff can only create and update orders
    match /orders/{orderId} {
      allow create, update: if request.auth != null && 
        (get(/databases/$(database)/documents/staffs/$(request.auth.uid)).data.role == 'staff' ||
         get(/databases/$(database)/documents/managers/$(request.auth.uid)).data.role == 'manager' ||
         get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role == 'admin');
    }
    
    // Only managers and admins can modify inventory and schools
    match /uniforms/{uniformId} {
      allow create, update, delete: if request.auth != null && 
        (get(/databases/$(database)/documents/managers/$(request.auth.uid)).data.role == 'manager' ||
         get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role == 'admin');
    }
    
    match /batchInventory/{batchId} {
      allow create, update, delete: if request.auth != null && 
        (get(/databases/$(database)/documents/managers/$(request.auth.uid)).data.role == 'manager' ||
         get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role == 'admin');
    }
    
    match /schools/{schoolId} {
      allow create, update, delete: if request.auth != null && 
        (get(/databases/$(database)/documents/managers/$(request.auth.uid)).data.role == 'manager' ||
         get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role == 'admin');
    }
    
    // Only admins can manage users
    match /staffs/{userId} {
      allow create, update, delete: if request.auth != null && 
        get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role == 'admin';
    }
    
    match /managers/{userId} {
      allow create, update, delete: if request.auth != null && 
        get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role == 'admin';
    }
    
    match /admins/{userId} {
      allow create, update, delete: if request.auth != null && 
        get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role == 'admin';
    }
  }
}
```

## DATABASE STRUCTURE

### Collections and Documents

1. **uniforms**
   - id: auto-generated
   - name: string
   - type: string (e.g., "Shirt", "Pants", "Skirt")
   - gender: string ("Male", "Female", "Unisex")
   - school: reference to school document
   - variants: array of objects
     - name: string
     - color: string
     - price: number
     - sizes: object (key-value pairs of size and quantity)
   - createdAt: timestamp
   - updatedAt: timestamp

2. **rawMaterials**
   - id: auto-generated
   - name: string
   - quantity: number
   - unit: string
   - price: number
   - supplier: string
   - createdAt: timestamp
   - updatedAt: timestamp

3. **batchInventory**
   - id: auto-generated
   - name: string
   - type: string
   - items: array of objects
     - variantName: string
     - color: string
     - price: number
     - sizes: array of objects
       - size: string
       - quantity: number
       - depletedAt: timestamp (null if not depleted)
   - status: string ("active", "depleted", "archived")
   - createdBy: string (user ID)
   - createdAt: timestamp
   - updatedAt: timestamp

4. **schools**
   - id: auto-generated
   - name: string
   - address: string
   - contact: string
   - email: string
   - status: string ("active", "inactive")
   - uniforms: array of references to uniform documents
   - students: array of objects
     - name: string
     - class: string
     - section: string
     - roll: string
     - measurements: object
   - createdAt: timestamp
   - updatedAt: timestamp

5. **orders**
   - id: auto-generated
   - customer: object
     - name: string
     - phone: string
     - email: string
   - school: reference to school document
   - items: array of objects
     - product: reference to uniform document
     - variant: string
     - color: string
     - size: string
     - quantity: number
     - price: number
   - totalAmount: number
   - status: string ("pending", "processing", "completed", "cancelled")
   - paymentStatus: string ("paid", "pending", "partial")
   - createdBy: string (user ID)
   - createdAt: timestamp
   - updatedAt: timestamp

6. **staffs**
   - id: user ID from Firebase Auth
   - email: string
   - firstName: string
   - lastName: string
   - role: string ("staff")
   - status: string ("active", "inactive")
   - createdAt: timestamp

7. **managers**
   - id: user ID from Firebase Auth
   - email: string
   - firstName: string
   - lastName: string
   - role: string ("manager")
   - status: string ("active", "inactive")
   - createdAt: timestamp

8. **admins**
   - id: user ID from Firebase Auth
   - email: string
   - firstName: string
   - lastName: string
   - role: string ("admin")
   - status: string ("active", "inactive")
   - createdAt: timestamp

## KEY IMPLEMENTATION DETAILS

### State Management with Zustand

The application uses Zustand for state management. Each major feature has its own store:

1. **inventoryStore.js**: Manages products (uniforms and raw materials)
2. **batchStore.js**: Manages batch inventory
3. **schoolStore.js**: Manages schools and associated students
4. **orderStore.js**: Manages orders
5. **authStore.js**: Manages authentication state

### Dashboard Implementation

The Dashboard component fetches real-time data from Firebase and calculates:
- Total inventory value
- Active schools count
- Total revenue
- Total orders
- Recent activity (orders, batches, schools)

The DynamicCharts component processes this data to display:
- Size demand analytics
- Revenue trends
- Top products
- School inventory distribution
- Orders by school

### Batch Inventory Features

- Tracks inventory by batch, variant, color, and size
- Records depletion dates when items are sold out
- Highlights depleted batches in the inventory table
- Provides detailed view of each batch

### Product Management

- Add new products with variants, colors, and sizes
- Compare cost price from batch inventory with selling price
- Calculate profit/loss percentage
- Track gender-specific products

### Order Processing

- Create orders with products from inventory
- Automatically update inventory quantities
- Track order status and payment status
- Filter orders by school or status

## DEPLOYMENT

### Build for Production

```bash
npm run build
# or
yarn build
```

### Deployment Options

1. **Firebase Hosting**:
   - Install Firebase CLI: `npm install -g firebase-tools`
   - Login: `firebase login`
   - Initialize: `firebase init`
   - Deploy: `firebase deploy`

2. **Vercel**:
   - Install Vercel CLI: `npm install -g vercel`
   - Deploy: `vercel`

3. **Netlify**:
   - Install Netlify CLI: `npm install -g netlify-cli`
   - Deploy: `netlify deploy`

## MAINTENANCE

### Regular Tasks

1. **Database Backup**: Set up regular Firestore backups
2. **User Management**: Regularly review user accounts and permissions
3. **Performance Monitoring**: Use Firebase Performance Monitoring to track app performance
4. **Error Tracking**: Use Firebase Crashlytics to track and fix errors

### Troubleshooting

1. **Authentication Issues**:
   - Check Firebase Authentication console for user status
   - Verify security rules in Firestore

2. **Data Not Loading**:
   - Check network requests in browser developer tools
   - Verify Firestore queries in the store files

3. **Slow Performance**:
   - Review Firestore indexes
   - Check for inefficient queries
   - Consider implementing pagination for large data sets

## CONTACT INFORMATION

For technical support or questions about the implementation:
- Email: support@monishainventory.com
- Phone: +1-123-456-7890 